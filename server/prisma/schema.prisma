// Prisma schema for SQLite (file-based DB)
// npx prisma migrate dev --name init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User Authentication & Authorization
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  role      String   @default("user") // "admin" | "user" | "developer"
  status    String   @default("active") // "active" | "suspended" | "pending"
  avatar    String?
  lastLogin DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  scenarios      Scenario[]
  moderationItems ModerationItem[]
  moderatedItems ModerationItem[] @relation("ModeratedItems")
  activities     UserActivity[]
  comments       Comment[]
  projects       Project[]

  @@map("users")
}

// User Activity Tracking
model UserActivity {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String   // "login", "logout", "create_scenario", "upload_data", etc.
  details   String?  // JSON string with additional details
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_activities")
}

// KPIs and Metrics
model KPI {
  id          Int      @id @default(autoincrement())
  co2Saved    Float    @default(0)
  jobsCreated Int      @default(0)
  netZero     Float    @default(0) // percent 0..100
  investment  Float    @default(0)
  energyGenerated Float @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("kpis")
}

// Scenarios and Planning
model Scenario {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  notes       String?
  score       Float    @default(0)
  status      String   @default("draft") // "draft" | "review" | "approved" | "implemented"
  tags        String?  // JSON array of tags
  data        String?  // JSON string with scenario data
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("scenarios")
}

// Projects and Infrastructure
model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  type        String   // "wind", "solar", "hydrogen", "transport"
  location    String?  // JSON with lat/lng
  capacity    Float    @default(0)
  status      String   @default("planning") // "planning" | "construction" | "operational"
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("projects")
}

// Data Moderation System
model ModerationItem {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  type        String   // "dataset", "scenario", "project", "comment"
  status      String   @default("PENDING") // PENDING | APPROVED | REJECTED
  reason      String?
  data        String?  // JSON string with item data
  userId      Int?     // User who submitted
  moderatorId Int?     // Admin who moderated
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  moderator User? @relation("ModeratedItems", fields: [moderatorId], references: [id], onDelete: SetNull)

  @@map("moderation_items")
}

// Comments and Collaboration
model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  type      String   // "scenario", "project", "moderation"
  itemId    Int      // ID of the item being commented on
  userId    Int
  parentId  Int?     // For nested comments
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

// System Settings and Configuration
model SystemConfig {
  id    String @id
  value String
  updatedAt DateTime @updatedAt

  @@map("system_config")
}